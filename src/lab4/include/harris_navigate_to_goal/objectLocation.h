// Generated by gencpp from file harris_navigate_to_goal/objectLocation.msg
// DO NOT EDIT!


#ifndef HARRIS_NAVIGATE_TO_GOAL_MESSAGE_OBJECTLOCATION_H
#define HARRIS_NAVIGATE_TO_GOAL_MESSAGE_OBJECTLOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace harris_navigate_to_goal
{
template <class ContainerAllocator>
struct objectLocation_
{
  typedef objectLocation_<ContainerAllocator> Type;

  objectLocation_()
    : distance(0.0)
    , angle_min(0.0)
    , angle_max(0.0)  {
    }
  objectLocation_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , angle_min(0.0)
    , angle_max(0.0)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef double _angle_min_type;
  _angle_min_type angle_min;

   typedef double _angle_max_type;
  _angle_max_type angle_max;





  typedef boost::shared_ptr< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> const> ConstPtr;

}; // struct objectLocation_

typedef ::harris_navigate_to_goal::objectLocation_<std::allocator<void> > objectLocation;

typedef boost::shared_ptr< ::harris_navigate_to_goal::objectLocation > objectLocationPtr;
typedef boost::shared_ptr< ::harris_navigate_to_goal::objectLocation const> objectLocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace harris_navigate_to_goal

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'harris_navigate_to_goal': ['/home/charris/introrobotics/turtlebot-gt-2018/src/harris_navigate_to_goal/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7c2a68da114c8466e8bb327666d2e9d";
  }

  static const char* value(const ::harris_navigate_to_goal::objectLocation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7c2a68da114c846ULL;
  static const uint64_t static_value2 = 0x6e8bb327666d2e9dULL;
};

template<class ContainerAllocator>
struct DataType< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "harris_navigate_to_goal/objectLocation";
  }

  static const char* value(const ::harris_navigate_to_goal::objectLocation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 distance\n\
float64 angle_min\n\
float64 angle_max\n\
";
  }

  static const char* value(const ::harris_navigate_to_goal::objectLocation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.angle_min);
      stream.next(m.angle_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objectLocation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::harris_navigate_to_goal::objectLocation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::harris_navigate_to_goal::objectLocation_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "angle_min: ";
    Printer<double>::stream(s, indent + "  ", v.angle_min);
    s << indent << "angle_max: ";
    Printer<double>::stream(s, indent + "  ", v.angle_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HARRIS_NAVIGATE_TO_GOAL_MESSAGE_OBJECTLOCATION_H
